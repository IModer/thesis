-- Comment

--Polinóm derklarálás
var X
var Y
var Z
--Aritmetika
3 + 3
3 * 3
3 - 3
(3 / 2) * 3
4 mod 3

--Polinóm Aritmetika
let f := X * X + 2 * X in f * f + f 

def f := X * X + 2 * X

def g := X * X * X * X + 4 * X * X - 4

f mod g

--f mod (Y * X) -- Runtime error

derivative X f 

--Függvények

def idNum := (\x : Num . x)

def absNum := (\x : Num . if x >= 0 then x else (- x))

\x : Num . (\f : Num -> Num . f x)

--Még nincs subst
--def tangent := (\v : Poly . \f : Poly . \a : Num . let dfa = (eval (derivative v f) a) in let fa = eval f a in fa + dfa * (v - a) )

--Lambda calc stuff

def T := (\x y : Num . x)
def F := (\x y : Num . y)
--def ITE := ...

def Zero := (\f : Num -> Num , x : Num . x)
def One  := (\f : Num -> Num , x : Num . f x)
def Two  := (\f : Num -> Num , x : Num . f (f x))

def Suc := (\n : (Num -> Num) -> Num -> Num . \f : Num -> Num . \x : Num . f (n f x))

def Plus := (\m : (Num -> Num) -> Num -> Num  . \n : (Num -> Num) -> Num -> Num . \f : Num -> Num . \x : Num . m f (n f x))

{-
Multi
line comment
-}

def plusFix := (\f : Num -> Num -> Num . \x : Num . \y : Num . if x == 0 then y else (f (x - 1) (y + 1)))

def factorial' := (\f' : Num -> Num . \x : Num . if x == 0 then 1 else x * f' (x - 1))

def fact := Fix factorial'