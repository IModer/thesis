{-

    This is the Prelude file for the 
    poly_lang language

    It contains wrappers for the basic operations and useful functions

-}

{-
    Wrappers for operators
    Naming convention :
        N - argument is number
        P - argument is poly
        B - bool
    So for example both argument to addNN are numbers 

-}

-- Polinomials

var X
var Y
var Z

-- Useful Poly functions

def evalAt(p x : Poly , a : Num) := subst [x, x*0 + a] p
-- Bool

def and (x y : Bool) := x & y

def or (x y : Bool) := x | y

def not (x : Bool) := if x then False else True

def xor (x y : Bool) := (x & (not y)) | ((not x) & y)

def nand (x y : Bool) := not (and x y)

-- Pred

def eqNN (x y : Num) := x == y

--def eqPP (x y : Poly) := x == y

def eqBB (x y : Bool) := x == y

-- NN
def addNN(x y : Num) := x + y

def subNN(x y : Num) := x - y

def mulNN(x y : Num) := x * y

def divNN(x y : Num) := x / y

def intDivNN(x y : Num) := x div y

def modNN(x y : Num) := x mod y

-- NP
def addNP := (\x : Num . (\y : Poly . x + y))

def subNP := (\x : Num . (\y : Poly . x - y))

def mulNP := (\x : Num . (\y : Poly . x * y))

--def divNP := (\x : Num . (\y : Poly . x / y))

def intDivNP := (\x : Num . (\y : Poly . x div y))

def modNP := (\x : Num . (\y : Poly . x mod y))

-- PN
def addPN := (\x : Poly . (\y : Num . x + y))

def subPN := (\x : Poly . (\y : Num . x - y))

def mulPN := (\x : Poly . (\y : Num . x * y))

--def divPN := (\x : Poly . (\y : Num . x / y))

def intDivPN := (\x : Poly . (\y : Num . x div y))

def modPN := (\x : Poly . (\y : Num . x mod y))

-- PP
def addPP := (\x : Poly . (\y : Poly . x + y))

def subPP := (\x : Poly . (\y : Poly . x - y))

def mulPP := (\x : Poly . (\y : Poly . x * y))

--def divPP := (\x : Poly . (\y : Poly . x / y))

def intDivPP := (\x : Poly . (\y : Poly . x div y))

def modPP := (\x : Poly . (\y : Poly . x mod y))

-- Characteristic Polinomials in X

def roottwo := X * X + 2

def rootthree := X * X + 3

def imaginary := X * X + 1

-- Mics

def compNNNN(f g : Num -> Num, x : Num) := f (g x)

def compBBBB(f g : Bool -> Bool, x : Bool) := f (g x)

def compBBNB(f: Bool -> Bool, g : Num -> Bool, x : Num) := f (g x)

def even(x : Num) := (x mod 2) == 0

def odd := compBBNB not even

def floor(x : Num) := x div 1

def ceiling(x : Num) := (x div 1) + 1

-- with Fix

def fact := fix ((\rec : Num -> Num , x : Num . if x == 0 then 1 else x * rec (x - 1)))

-- x^y
def pow := fix ((\rec : Num -> Num -> Num , x y : Num . if y <= 0 then 1 else x * rec x (y - 1)))

-- p^x, where p : Poly
def powP := fix ((\rec : Poly -> Num -> Poly , p : Poly , x : Num . if x <= 0 then (p * 0 + 1) else p * rec p (x - 1)))

-- calculates the equation for the tangent line of a polinomial at a given point

def tangent(f x : Poly , a : Num) := (eval [x , a] f) + (eval [x , a] (derivative x f)) * (x - a)

